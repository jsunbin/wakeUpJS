<템플릿 리터럴>
이중 따옴표나 작은 따옴표 대신 백틱(` `)을 이용, 플레이스 홀더를 이용하여 표현식을 넣을 수 있는데, 이는 $와 중괄호( $ {expression} ) 로 표기할 수 있다. 플레이스 홀더 안에서의 표현식과 그 사이의 텍스트는 함께 함수로 전달된다.

(`${x * y}입니다.`); // 템플릿 리터럴 중괄호 안에 연산을 넣는 것을 권하지 않는다.

<옳바른 표현>
const x2 = 10;
const y2 = 20;
const result = x2 * y2;
console.log(`x 값은 ${x2}이고 y값은 ${y2}이고 두개를 곱한 값은 ${result}입니다.`
);

const s = "hello";
const ss = "world";
const result2 = s + "\n" + ss;
console.log(result2); // hello
                         world

------------------------------------

<Array>
배열은 리스트와 비슷한 객체로서 순회와 변형 작업을 수행하는 메서드를 갖는다. 배열은 길이가 늘어나거나 줄어들 수 있고 데이터를 연속적이지 않은 곳에 저장할 수 있으므로 밀집성을 보장하지 않는다.

const arr = [10, 20, 30];
arr[0] = 100; // const는 값의 변화가 안되지만 배열로는 변경 가능! [100, 20, 30]

console.dir(arr); => 프러퍼티와 메서드를 볼 수 있다.

(Array에 숫자로 들어간 값은 대괄호로 호출 가능하다)
arr[1]; // 20

(문자로 입력된 값은 .으로 호출 가능하다)
arr.length;
arr["length"];

(프로퍼티를 추가 하는것도 가능하다 하지만 배열은 길이는 변하지 않는다.)
arr["garam"] = 100; // [10, 20, 30, garam: 100]
arr.ram = 1000; // [10, 20, 30, garam: 100, ram: 1000]

(배열은 순서가 있다. 배열의 순서를 index라고 하며 이 순서로 호출하는 것을 indexing라고 한다.
또한 배열 안의 값을 원소(elements)라고 한다.)
const arr = [10, 20, 30];
arr[0] // 10, arr[1] // 20, arr[2] // 30

(배열에 다른 원시타입과 객체타입을 포함할 수 있다.)
const arr = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
];      //  arr[0]은 [1,2,3]이고 arr[1][2]는 6이다.

---------------------

0차원,단일 차원 = 스칼라
const a = 10; 

1차원 = 벡터
const b = [10, 20, 30]; 

2차원 = 메트릭스
const c = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
]; 

3차원,다차원 = 텐서 (인공지능 중 가장 유명한 라이브러리 텐서플로우는 다차원 행렬의 연산!)
const d = [
  [
    [1, 2],
    [1, 2],
    [1, 2],
  ],
  [
    [1, 2],
    [1, 2],
    [1, 2],
  ],
  [
    [1, 2],
    [1, 2],
    [1, 2],
  ],
];

---------------------------

(push: 배열의 맨 뒤에 값을 추가)
const arr = [1, 2, 3];
arr.push(4);   => [1, 2, 3, 4]

(pop: 배열의 마지막 값을 꺼낸 뒤 그 값 반환)
const arr = [1, 2, 3, 4];
arr.pop();
arr; => [1,2,3]

(unshift: 배열의 맨 앞에 값을 추가)
const myArray1 = ["사과", "바나나", "수박"];
myArray1.unshift("오이");
console.log(myArray1);  => ['오이','사과', '바나나', '수박']

(shift: 배열의 앞에 값을 꺼낸 뒤 그 값 반환)
const myArray2 = ["사과", "바나나", "수박"];
myArray2.shift();
console.log(myArray2); => ['바나나', '수박']

let firstValue = myArray2.shift();
firstValue; // 사과가 들어감

----------------------------

<arr.splice(start, deleteCount, items)> -> splice() 메서드는 배열의 기존 요소를 삭제 또는 교체하거나 새 요소를 추가하여 배열의 내용을 변경한다.

const arr = [1, 2, 3];
arr.splice(1, 0, 4); // arr[1]에 아무것도 삭제하지 않고 4를 넣겠다. [1, 4, 2, 3]

!전개구문을 사용하여 배열 넣기!
const arr = [1, 2, 3];
arr.splice(1, 0, ...[10, 20, 30]);

또는 이렇게 대괄호를 빼고 적기
const arr = [1, 2, 3];
arr.splice(1, 0, 10, 20, 30);

----------------------------
문제 
만들고 싶은 값 [10, 1, 2, 3, 20, 30, 40, 1, 2, 3, 50]

const arr = [10, 20, 30, 40, 50];
const x = [1, 2, 3];

답 : arr.splice(1, 0, ...x);
     arr.splice(6, 0, ...x);

-------------------------------

<arr.splice(deleteCount) 삭제 사용하기>

const arr = [10, 20, 30, 40, 50];
arr.splice(2, 1, 5); // arr에 2번째에 1개를 삭제하고 5를 넣는다.
console.log(arr); // [10, 20, 5, 40, 50]

arr.splice(2, 2); // arr에 2번째에 값 2개를 삭제하고 삽입되는 값은 없다. [10, 20 ,50]

const arr = [10, 20, 30, 40, 50];
arr.splice(1);
arr;  => [10]

<arr.slice(start, end)> -> slice() 메서드는 어떤 배열의 start부터 end 까지(end 미포함)에 대한 얕은 복사본을 새로운 배열 객체로 반환, 원본 배열은 바뀌지 않는다.

const myArray = ["apple", "banana", "cherry", "durian", "elderberry"];
console.log(myArray.slice(1, 4)); // ['banana', 'cherry', 'durian'] 인덱스 1부터 4전(3)까지 자르기 
console.log(myArray); // ['apple', 'banana', 'cherry', 'durian', 'elderberry']
myArray.slice(1); // ['banana', 'cherry', 'durian', 'elderberry']
myArray.slice(0, 100);  // ['apple', 'banana', 'cherry', 'durian', 'elderberry']

<arr.forEach(함수)> : 주어진 함수를 배열 요소 각각에 대해 실행

콜백함수
const arr = [10, 20, 30, 40, 50];
arr.forEach(function (item, index) {
  console.log(index, item);  
});

출력(index item)
// 0 10
// 1 20
// 2 30
// 3 40
// 4 50

const arr = Array(100).fill(0); // 배열 100칸을 만들고 0으로 채운다
const arr2 = []; // 빈 배열 생성

// 같은 코드1 (이름이 없는 함수 사용)
arr.forEach(function (item, index) {
  arr2.push(index + 1);  // 1부터 100까지 push
});

// 같은 코드2 (화살표 함수)
arr.forEach((item, index) => {
  arr2.push(index + 1);
});

// 같은 코드3(한줄 짜리 코드 중괄호 생략, 실무 사용)
arr.forEach((item, index) => arr2.push(index + 1));

<map> :데이터를 뽑으려고 많이 사용하며 map은 forEach와 다르게 새로운 배열을 생성함

const arr = [1, 2, 3];
arr.map(function (x) {
  return x ** 2;   // [1, 4, 9] 배열 생성
});


-------------------

// 같은 코드 1
const arr = Array(100).fill(0);
arr.map((v, i) => i);

// 같은 코드 2
const arr = Array(100).fill(0);
arr.map(function (v, i) {
  return i;
});

// 같은 코드 3
const arr = Array(100).fill(0);
function hojun(v, i) {
  return i;
}
arr.map(hojun);

// 같은 코드 4
const arr = Array(100).fill(0);
arr.map((v, i) => {
  return i;
});

------------------------

<arr.filter> : filter() 메서드는 주어진 함수의 테스트를 통과하는 모든 요소를 모아 새로운 배열로 반환한다.

(짝수만 반환하기)
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
arr.filter(function (el) {
  return el % 2 === 0;
});

(홀수만 반환하기)
const arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
arr1.filter(function (el) {
  return el % 2 !== 0; 
});

(메서드 체이닝) : 연속적인 코드 줄에서 개체의 메소드를 반복적으로 호출 하는 것을 의미
(n까지 짝수의 합)

function solution(n) {
  return Array(n)
    .fill() 
    .map((_, i) => i + 1) // i==0이므로 1부터 채우기
    .filter((v) => v % 2 === 0) // 짝수 검열
    .reduce((a, c) => a + c, 0); 
}

출력 : solution(20) 110

(from: 유사 배열 객체(array-like object)나 반복 가능한 객체(iterable object)를 얕게 복사해 새로운Array 객체를 만듦)
Array.from("hello world").filter((v) => !["a", "e", "i", "o", "u"].includes(v)); // from으로 'h', 'e', ...단어 하나하나씩 뽑은 뒤 filter로 모음 제거

출력 : ['h', 'l', 'l', ' ', 'w', 'r', 'l', 'd']

------------------------

<reduce> : 메서드는 배열의 각 요소에 대해 주어진 (reducer) 함수를 실행하고, 하나의 결과값을 반환
const arr2 = [1, 2, 3, 4, 5];
arr.reduce((a, c) => a + c, 0); // 0을 항상 넣어주세요! < 이 코드 외우기>

--------------------------

<includes> :  메서드는 배열이 특정 요소를 포함하고 있는지 판별
const arr3 = ["hello", "world", "hojun"];
arr3.includes("world");

-----------------------------
<join> : 메서드는 배열의 모든 요소를 연결해 하나의 문자열로 만듦
const arr4 = ['hello', 'world', 'hojun']
arr4.join('!') // 'hello!world!hojun' 
!! 주의 !! 
const arr5 = [hello, world, hojun] // error
arr5.join('-') 

---------------------------

<sort> : 배열의 요소를 적절한 위치에 정렬한 후 그 배열을 반환, 기본 정렬 순서는 문자열의 유니코드 코드 포인트를 따른다.

const num1 = [3, 1, 8, 6];
console.log(num1.sort()); // 1,3,6,8

const num2 = [3, 1, 11, 8, 6];
console.log(num2.sort()); // 1,11,3,6,8 error

(오름차순 정리)
const num3 = [3, 1, 11, 8, 6];
console.log(num3.sort((a, b) => a - b));

(내림차순 정리)
console.log(num3.sort((a, b) => b - a)); 

--------------------------

<object> : 다양한 키 모음 및 더 복잡한 엔티티들을 저장하는 데 사용

const human = {
  name: "hojun",
  age: 53,
  from: "korea",
  askingHim: function () {
    console.log("hello world!");
  },
  0: "123456789",
};

console.log(human.name); //hojun
console.log(humnan.age); // 53
console.log(human["name"]); // hojun
console.log(human["age"]); //53

human.0 // error
human["0"]; // '123456789'
human[0]; // '123456789'

human.name = "ram";
human.name; // 'ram'
human.askingHim(); // 'hello world!'
delete human.job; // 삭제

!! 다른 언어와 동작 방식이 다름 !!
console.log("age" in human); // true
console.log(20 in [10, 20, 30]); // false

const aespa = {
    members: ['카리나', '윈터', '지젤', '닝닝'],
    from: '광야',
    sing: function(){
        return "적대적인 고난과 슬픔은 널 더 popping 진화시켜!"
    }
};

console.log(aespa.hasOwnProperty('itzy')); // 가지고 있는지 확인

!! 다른언어는 aespa.keys()와 같은 방식으로 사용!!
!! js는 앞에 Object를 붙여줘야한다.!!
console.log(Object.keys(aespa)) //  key 값만 출력
console.log(Object.values(aespa)) // value 값만 출력

-----------------------------

<함수> 

장점 : 
1. 재사용성이 높아진다.
2. 유지보수가 용이
3. 구조 파악이 용이

함수의 일반적인 형태 == 함수 선언문
function one(a, b) {     // (a, b) 파라미터
  let z = a + b;
  return z ** 2;
}
console.log(one(7, 3));  // (7, 3) 아규먼트

화살표 함수 형태
const two = (a, b) => (a + b) ** 2;
console.log(one(7, 3));

이름 없이 선언하는 함수 == 함수 표현식
const three = function (a, b) {
  let z = a + b;
  return z ** 2;
};
console.log(three(7, 3));

콜백 함수
함수를 아규먼트로 전달해서 언젠가는 사용해줄게!
function four(a, b, c) {
  let z = c(a, b) + c(a, b);  //100 + 100
  return z * 2;  // 200*2
}

four(7, 3, one); // 400 출력

---------------------------------------
<화살표 함수에 대한 다양한 예제 **** 중요>

function 함수1(x, y) {
  return x + y;
}
// 위 함수를 화살표 함수로 작성하면 아래와 같습니다.
let 함수1 = (x, y) => x + y;

// 함수 실행시 전달하는 인자가 한 개라면 소괄호를 생략할 수 있습니다.
let 함수2 = (x) => x + 10;

// 화살표 함수 내부에서 한 줄 표현식만 반환한다면 return 키워드를 생략해도 됩니다.
let 함수3 = (x) => x + 10;

----------------------------

<return문>

function hello(para) {
  console.log(para);
  console.log("hello");
  return 100;
}

console.log(hello(10)); // 앞에것 모조리 사라지고 return 값 100 출력

------------------------------

(아래 3개는 같은 코드)
function hello1() {
  console.log("hello");
}

function hello2() {
  console.log("hello");
  return;
}

function hello3() {
  console.log("hello");
  return undefined;
}

-----------------------------

// return문을 만나면 중간에 종료함

function hello4() {
  console.log("hello");
  console.log("hello");
  console.log("hello");
  return;
  console.log("hello");
  console.log("hello");
  console.log("hello");
}

hello4();
// return 전인 hello 세번만 출력

---------------------------------

return을 하더라도 1회 반복만 종료되는 것이지 전체 반복이 종료가 아니다.
const x1 = [10, 20, 30, 40];  // 배열을 다 돈다.
x.forEach((el) => {
  console.log(el);
  return;
  console.log("world");
});

------------------------------

function 함수1(a, b, c) {
  return a + b + c;
}

함수1(10, 20, 30, 40); // 아규먼트가 더 많이 들어가도 error가 발생하지 않는다.
함수1(10, 20); // 아규먼트가 더 적게 들어가도 NaN 반환이 되는 것이지 error가 발생하지 않는다.

function 함수1(a = 10, b = 20, c = 30) {
  return a + b + c;
}
함수1(1, 1); // 함수1(a=1, b=1)로 들어감 출력:32

----------------------------

<즉시 실행 함수> (괄호로 감싸져있다.)

(function() {
  console.log('이 함수는 만들어지자마자 바로 실행됩니다!');
})();
