<switch문>
복수의 if 조건문은 switch문으로 바꿀 수 있다 switch문을 사용한 비교법은 특정 변수를 다양한 상황에서 비교할 수 있게 해준다. 코드 자체가 비교 상황을 잘 설명한다는 장점이 있다.

switch문은 하나 이상의 case문으로 구성되고, default문은 필수가 아니다.

switch (value) {
  case "one":
    console.log("hello one");
    break;

  case "two":
    console.log("hello two");
    break;

  case "three":
    console.log("hello three");
    break;

  default:
    console.log("hello default");
    break;
}

주의 ! break를 넣지 않았을 때는 뒷 부분까지 다 출력됨

(다른 언어에서 switch문을 사용하는 방법)

const 요일 = new Date().getDay();
const 요일객체 = {
  0: "일요일",
  1: "월요일",
  2: "화요일",
  3: "수요일",
  4: "목요일",
  5: "금요일",
  6: "토요일",
};

default 처리하는 방법

1. 널리쉬 연산자 사용
console.log(요일객체[요일] ?? "hello"); 
2. 단락평가 사용
console.log(요일객체[요일] || "hello");

----------------------------------

<반복문>

1. for 문 : 고전적인 for문
(주의! 변수 선언시, const를 쓰면 값 변경이 불가하여 에러 발생)

for (let i = 0; i < 10; i++){
    console.log(i); // 0~9까지 출력
}

// console.log(i) i는 반복문이 끝난 다음 호출할 수 없다.

for (let i = 0; i < 10; i+=2) { // i+=2 2씩 증가하여 짝수만 출력 
    console.log(i);
}

for (i = 0; i < 10; i+=2) { // let i를 생략하면 i가 전역으로 생성이 된다.
    console.log(i);
}

for(;;) { // 무한 반복 코드 (이런코드 작성 금지), 메모리를 많이 잡아먹기 때문에
          // 반복의 시간을 가능하면 정해줘라
          // 탈출 조건을 명확히 해라
    console.log('실행하지 마세요')
}

!!!!!!!!!!! for in, for of문 안에서는 const를 쓸수있다. !!!!!!!!!!!!!!

2. for in 문: 객체의 프로퍼티 키 열거 전용
해당 객체가 상속받는 프로토타입 체인상의 모든 프로퍼티 키를 열거한다. 단, [[Enumerable]] 값이 false인 프로퍼티는 제외

let arr1 = [10, 20, 30, 40, 50];
for (const i in arr1) {
    console.log(i) // 0,1,2,3,4
    console.log(arr1[i]);   // 10,20,30,40,50
} ----- 배열에서는 for in문이 아닌 for of문을 써야함----

let obj1 = { one: 10, two: 20 };
for (const i in obj1) {
  console.log(i); // one, two
  console.log(obj1[i]); //10,20
}

3. for of 문: 이터러블 순회 전용 (IE에서 사용불가)
이터러블에는 String, Array, Map, Set, DOM컬렉션(HTMLColletion, NodeList) 등이 있다.

let arr2 = [10, 20, 30, 40, 50];

for (const item of arr2) {
  console.log(item); // 10,20,30,40,50
}

let obj2 = { one: 10, two: 20 };

for (const item of obj2) {
  console.log(item); // of 뒤에 iterable한 값이 나와야 한다. (순회가능한 = 순서가있는)
}

for (const item of "hello world") {
  console.log(item); // 순서가 있으므로 h e l l o 하나하나 출력
}

----------------------------

(문제) 1차원의 점들이 주어졌을 때, 그 중 가장 거리가 짧은 것의 쌍을 출력하는 함수를 작성하시오. (단 점들의 배열은 모두 정렬되어있다고 가정한다.)

예를들어 S={1, 3, 4, 8, 13, 17, 20} 이 주어졌다면, 결과값은 (3, 4)가 될 것이다.

s = [1, 3, 4, 8, 13, 17, 20];

for (let i = 0; i < s.length - 1; i++) {  // [i+1] 때문에 s.length -1을 해준다.
  console.log(s[i], s[i + 1]); 
  console.log(s[i + 1] - s[i]);
}

(문제) 다음 user의 나이 평균을 구하세요.
let user = [
  {
    _id: "642e3071c61a23c70ae6076b",
    index: 0,
    age: 31,
    name: "Hicks Garza",
    gender: "male",
  },
  {
    _id: "642e3071ecd6f90a87d64731",
    index: 1,
    age: 32,
    name: "Ayers Harrington",
    gender: "male",
  },
  {
    _id: "642e3071cef9ddc131f047fb",
    index: 2,
    age: 39,
    name: "Lamb Adams",
    gender: "male",
  },
];
(for in 문으로 풀기)
let a = 0;
for(const i in user) {
    a += user[i].age;
}
console.log((a / user.length).toFixed(2));

(for of 문으로 풀기)
let x = 0;
for(const i of user) {
    x += i.age;
}
console.log((x / user.length).toFixed(2));

(for 문으로 풀기)

let z = 0;
fot(let i = 0; i < user.length; i++) {
    z += user[i]["age"];
}
console.log((z / user.length).toFixed(2));

(심화문제) (age가 없는 객체가 있을 때)
let user2 = [
  {
    _id: "642e3071c61a23c70ae6076b",
    index: 0,
    age: 31,
    name: "Hicks Garza",
    gender: "male",
  },
  {
    _id: "642e3071ecd6f90a87d64731",
    index: 1,
    age: 32,
    name: "Ayers Harrington",
    gender: "male",
  },
  {
    _id: "642e3071cef9ddc131f047fb",
    index: 2,
    name: "Lamb Adams",
    gender: "male",
  },
];

let age2 = 0;

for (const i of user2) {
  age2 += i.age ?? 0;  // i에 age가 없으면(null, undefined...) 0 취급을 한뒤 age2에 넣겠다
}

console.log((age2 / user2.length).toFixed(2));

------------------------------

<반복문 while>

while 문: 고전적인 while문

(조건)
반복이 시작되기 전에 조건문은 참,거짓을 판단받게 된다. 만약 조건문이 참이라면, while문 안의 문장들이 실행된다. 거짓이라면, 문장은 그냥 while 반복문 후로 넘어간다.

(문장)
조건문이 참일 때만 while문 속의 문장들이 실행된다. 반복문 속에 여러개의 문장을 사용하고 싶다면 중괄호 { } 를 통해 문장들을 하나로 묶어야 한다.

let num = 0;
while(num <3){  // num이 3보다 작을 때까지 반복한다.
    console.log(num);  // 0~2 까지 출력
    num++;
}

do while 문 (잘 쓰지 않는다.)
do...while 문은 테스트 조건이 거짓으로 평가될 때까지 지정된 구문을 실행하는 루프를 만듭니다. 단, 구문이 실행된 뒤에 테스트 조건이 평가됨으로 구문은 무조건 한 번은 실행됩니다.

(구문)
테스트 조건이 참일 때마다 한 번이상 실행되는 구문입니다. 만약 루프 내에서 여러 구문을 반복 실행 시키고 싶으시다면, 다음 명령을 사용합니다. block 구문을 활용하여 ({ ... }) 이런 식으로 그룹화합니다.

(조건식)
루프가 실행될 때마다 평가되는 식입니다. 만약 조건식이 참으로 평가되었다면, 구문 이 다시 실행됩니다. 만약 조건식이 거짓으로 평가되었다면, 자바스크립트는 do...while. 구문 밑에 있는 구문들을 실행시킵니다.

let result = '';
let i = 0;
do {                // do...while문은 적어도 한번 반복되고 i 변수가 5보다 작을 때 까지 실행
   i += 1;
   result += i + ' ';
}
while (i > 0 && i < 5);

console.log(result);

----------------------------------

<암기해야 하는 코드>

1. 구구단

(for 문)

for (let i = 2; i < 10; i++) {
    for (let j = 1; j < 10; j++) {
        console.log(`${i} * ${j} = ${i * j}`);
    }
}

(while 문)

let a = 2;
while(a < 10) {
    let b = 1;      // 꼭 여기서 b를 초기화를 시켜줘야 3,4,5,6,7,8,9단까지 출력할 수 있음.
    while(b < 10) {
        console.log(`${a} * ${b} = ${a * b}`);
        b++;
    }
    a++;
}

2. 문자열 뒤집기

(for 문)

let s = "hello world";
let result = "";

for (let i = 0; i < s.length; i++) {
    result = s[i] + result;
}
console.log(result);

(while 문)

let t = "hello world";
let result2 = "";
let count = 0;

while(count < t.length) {
    result1 = t[count] + result1;
    count++;
}
console.log(result);


3. 팩토리얼! (5! 만들기)

(for 문)

let y = 1;
for(let i = 1; i < 6; i++) {
    y *= i;
}

console.log(y);

(while 문)

let z = 1;
i = 1;
while(i < 6) {
    z * = i;
    i++;     // i를 +1을 해줘야함
}
console.log(z);

--------------------------------

<break> 
break 문은 현재 반복문, switch 문, 또는 label 문을 종료하고, 그 다음 문으로 프로그램 제어를 넘긴다.

for (let i = 2; i < 10; i++) {
  for (let j = 1; j < 10; j++) {
    console.log(`${i} X ${j} = ${i * j}`);
    if (j === 3) {                // x3까지만 출력하고 다음 단으로 넘어간다.
      break;
    }
  }
}

switchValue = 0;
for (let i = 2; i < 10; i++) {
  for (let j = 1; j < 10; j++) {
    console.log(`${i} X ${j} = ${i * j}`);
    if (j === 3) {
      if (true) {
        if (true) {
          if (true) {
            switchValue = 1;
            break;
          }
        }
      }
    }
  }  // 위와 같은 출력결과
}

 // toggle
  if (switchValue === 1) {
    break;
  }

--------------------------

<continue>

continue 문은 현재 또는 레이블이 지정된 루프의 현재 반복에서 명령문의 실행을 종료하고 반복문의 처음으로 돌아가여 루프문의 다음 코드를 실행
for (let i = 2; i < 10; i++) {
  for (let j = 1; j < 10; j++) {
    if (j === 3) {
      continue;        // x3을 출력하지 않고 x4부터 다시 출력한다.
    }
    console.log(`${i} X ${j} = ${i * j}`);
  }
}

-------------------------------

<label>
레이블 구문은 break나 continue 구문과 함께 사용할 수 있다. 원하는 식별자로 구문 앞에 레이블을 추가할 수 있다. 자주 사용되지않는다. 반복문으로 점프하는 대신에 함수를 호출할 수도 있다.

label은 특정한 곳으로 '점프'하게 만들며 가독성을 해친다.

outer: for (let i = 0; i < 3; i++) {
  for (let j = 0; j < 3; j++) {
    if (i + j === 3) {
      break outer;      // outer 레이블로 점프
    }
    console.log(i, j);
  }
}

--------------------------------

<전개구문>
전개 구문을 사용하면 배열이나 문자열과 같이 반복 가능한 문자를 0개 이상의 인수 (함수로 호출할 경우) 또는 요소 (배열 리터럴의 경우)로 확장하여, 0개 이상의 키-값의 쌍으로 객체로 확장시킬 수 있다.

(배열의 전개구문)

const 과일들 = ["사과", "파인애플", "수박"];
const 생선들 = ["조기", "갈치", "다금바리"];
const 합치면 = [...과일들, ...생선들];
const 합치면2 = [과일들, 생선들];

console.log(합치면);   // ['사과', '파인애플', '수박', '조기', '갈치', '다금바리'] 6
console.log(합치면2);  // ['사과', '파인애플', '수박'] 3 ,['조기', '갈치', '다금바리']3

(객체의 전개 구문)

const 위니브1 = { 개리: 1, 빙키: 2 };
const 위니브2 = { 라이캣: 3 };
const 위니브3 = { ...위니브1, ...위니브2 };

console.log(위니브3);     // {개리: 1, 빙키: 2, 라이캣: 3}


const 위니브임직원 = {
  개리: "재직중",
  빙키: "재직중",
  라이켓: "재직중",
  뮤라: "재직중",
  해골왕: "재직중",
};

const 위니브임직원2 = {   // 전개구문을 사용해서 키 값과 벨류 값을 수정하여 새로운 객체를 만들 수 있다.
  ...위니브임직원,
  라이켓: "휴가",
  해골왕: "퇴사",
};

<구조분해할당>
구조 분해 할당 구문은 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 JavaScript 표현식이다.

for (const [i, j] of [
  [1, 2],
  [3, 4],
  [5, 6],
]) {
  console.log(i, j);         //  1   2
                                 3   4
}                                5   6

-------------------------------------------
const 위니브임직원 = {
  개리: "재직중",
  빙키: "재직중",
  라이켓: "재직중",
  뮤라: "재직중",
  해골왕: "재직중",
};
Object.entries(위니브임직원);  

// 출력결과
0: ['개리', '재직중']
1: ['빙키', '재직중']
2: ['라이켓', '재직중']
3: ['뮤라', '재직중']
4: ['해골왕', '재직중']

Object.entries() 메서드는 for...in와 같은 순서로 주어진 객체 자체의 enumerable 속성 [key, value] 쌍의 배열을 반환

for (const [i, j] of Object.entries(위니브임직원)) {
  console.log(i, j);
}

// 출력

개리 재직중
빙키 재직중
라이켓 재직중
뮤라 재직중
해골왕 재직중

-----------------------------------------

let [a, b] = [10, 20];   // a= 10, b = 20

let [one, two, three] = "010-1234-5678".split("-"); // one = '010, two = '1234', three ='5678'

let [one, two, ...three] = "010-1234-2903-123-123".split("-");
// one = '010', two = '1234', three = (3)['2903', '123', '123']

const test1 = [
  [1, 2, [10, 20]],
  [3, 4, [30, 40]],
  [5, 6, [50, 60]],
];
for (const [i, j] of test1) {
  console.log(i, j);
}
// 출력 
1 2
3 4
5 6

const test1 = [
  [1, 2, [10, 20]],
  [3, 4, [30, 40]],
  [5, 6, [50, 60]],
];
for (const [i, j, k] of test1) {
  console.log(i, j, k);
}

// 출력
1 2 [10, 20]
3 4 [30, 40]
5 6 [50, 60]

!! 기억 !!

const test1 = [
  [1, 2, 10, 20],
  [3, 4, 30, 40],
  [5, 6, 50, 60],
];
for (const [i, j, ...k] of test1) {
  console.log(i, j, k);
}

// 출력
1 2 [10, 20]
3 4 [30, 40]
5 6 [50, 60]