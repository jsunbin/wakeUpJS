DOM (Document Object Model)
DOM은 HTML 문서의 내용을 트리형태로 구조화하여 웹페이지와 프로그래밍 언어를 연결시켜주는 역할을 한다. 이때 각각의 요소와 속성, 콘텐츠를 표현하는 단위를 '노드(node)'라고 한다.

DOM이 사용되는 곳
뷰 포트에 무엇을 렌더링 할지 결정하기 위해 사용된다.
페이지의 컨텐츠 및 구조, 그리고 스타일이 JavaScript 프로그램에 의해 수정되기 위해 사용된다.

DOM과 HTML의 차이점
DOM은 항상 유효한 HTML 형식이다.
DOM은 JavaScript에 의해 수정될 수 있는 동적 모델이어야 한다.
DOM은 가상 요소를 포함하지 않는다. ( Ex. ::after )
DOM은 보이지 않는 요소를 포함한다. ( Ex. display : none )

-----------------------------------

<DOM 트리에 접근하기>

<getElementById,getElementsByClassName,getElementsByTagName> : 태그 이름이나 클래스 이름을 갖는 추가적인 요소가 문서에 추가되면 콜렉션(collection)이 갱신되어 해당 콜렉션이 "살아있다"라고 한다.

    <p>hello</p>
    <p>hello</p>
    <p id="myTxt">hello</p>
    <p class="txt1">hello</p>
    <p class="txt1">hello</p>

    1. 해당하는 ID를 가진 요소에 접근하기
     document.getElementById("myTxt"); 

    2. 해당하는 html 태그를 가진 모든 요소에 접근하기
     document.getElementsByTagName("p"); 

    3. 해당하는 클래스를 가진 모든 요소에 접근하기
     document.getElementsByClassName("txt1");

    (모두 변수에 저장 후 사용해야 한다.)
     const element = document.getElementsByClassName("txt1");

     // 문제

     점심 식단
    <article id="container">
      <ul>
        <li>탕수육</li>
        <li class="item-second">유산슬</li>
        <li>짜장면</li>
      </ul>
    </article>
    저녁 식단
    <article>
      <ul>
        <li>된장국</li>
        <li class="item-second">김치찌게</li>
        <li>해장국</li>
      </ul>
    </article>

     (document.을 사용하면 html 전체 문서를 훑는것이며, 원하는 부분의 문서를 따로 지정해 줄 수있다.)

     <지정 문서를 읽게 한 뒤 뽑아오기>

     const container = document.getElementById("container");
     container.getElementsByTagName("li")[0]; 배열같은 객체로 반환 된다. (유사배열객체)그러므로 []로 키 값을 호출
     container.getElementsByClassName("item-second"); 또는 
     container.getElementsByTagName("li")[1];

     <전체 문서를 읽고 뽑아오기>

      document.getElementsByTagName("li")[0]; 
      document.getElementsByClassName("item-second")[0]; 
      document.getElementsByTagName("li")[1];


    ---------------------------------------------------

    <querySelector사용하기> : 배열처럼 작동하는 NodeList을 반환. 이 리스트는 "static"하다. static이란 대응되는 새로운 요소가 페이지에 추가되더라도 리스트가 갱신되지 않는다는 뜻!
    하지만 !!!!!!!!!!!!! (NodeList는 가지고있던 정보를 업데이트 했을 때는 즉시 반영된다.)

     const container = document.getElementById("container");

     container.querySelector("li"); // 지정된 선택자 또는 선택자 그룹과 일치하는 문서 내의 querySelector() 첫번째 항목을 반환

     container.querySelector(".item-second"); // .클래스로 찾기 #아이디로찾기 (css 선택자)

     container.querySelector("li:last-child"); // (css 선택자 모두 사용 가능) 짜장면 출력

     container.querySelectorAll("li"); // 모든 요소에 접근하기

    ---------------------------------------------------------

    <자바스크립트로 요소를 만들고 html에 배치하기>

     const listItem = document.createElement("li"); // 요소 생성
     container.append(listItem); // html에 넣어주기

     <자바스크립트로 요소 삭제>

      const target = document.querySelector(".item-second"); // 요소 찾아 넣어주기
      target.remove(); // 해당 요소 삭제

     <자바스크립트로 요소 안 텍스트 바꾸기> 

     container.querySelector(".item-second").textContent  = "라조기"; // 텍스트 바꾸기

     <자바스크립트로 요소 안 클래스 이름 추가>
     container.querySelector(".item-second").classList.add("new"); // 클래스 새로

    ------------------------------------------------

    <이벤트 삽입> : target.addEventListener( type, listener )의 문법 형태
    이벤트의 타입에는 click, mouseover, mouseout, wheel 등 다양한 이벤트를 감지하며, listener 함수의 인수에는 이벤트에 대한 정보가 담겨있다.

    <button>HELLO!</button> // html문서 안 버튼
    
    const myBtn = document.querySelector("button");

      myBtn.addEventListener("click", function () { 
        console.log("hello world");
      });  // 버튼을 클릭했을 때 console.log에 "hello World"를 출력

    
    <클래스 제어> : DOM api를 통해 요소의 class 속성을 제어할 수 있다.

     <button>Make me BLUE!</button> // html문서에 있는 버튼

     const myBtn2 = document.querySelector("button"); // myBtn2에 querySelector로 가져온 button 요소 넣어주기

      myBtn2.addEventListener("click", function () {
      myBtn2.classList.add("blue"); // blue 라는 클래스의 속성 값을 지정 할 수 있다.
      myBtn2.classList.remove("blue");  // 클래스를 제거
      myBtn2.classList.toggle("blue");  // 클래스를 토글. 없으면 넣어주고, 있으면 제거
      myBtn2.classList.contains("blue"); // 해당하는 클래스가 있는지 확인
      });
    
    ----------------------------------------

    <요소 제어> : DOM api를 이용하여 요소를 새롭게 생성하고, 위치하고, 제거할 수 있다.

    1. document.createElement(target); 
       target 요소를 생성합니다.

    2. document.createTextNode(target); 
       target 텍스트를 생성합니다.

    3. element.appendChild(target);    
       target 요소를 element의 자식으로 위치합니다.
    
    4. element.removeChild(target);    
       element의 target 자식 요소를 제거합니다.


    <ul></ul>
    <button>Make me MORE!</button>  // html 문서 안 버튼

    const myBtn = document.querySelector("button");
    const myUl = document.querySelector("ul");

    myBtn.addEventListener("click", function () {
        for (let i = 0; i < 5; i++) {
          const myLi = document.createElement("li");
          const btnDel = document.createElement("button");
          const btnTxt = (document.createTextNode = "버튼");

          btnDel.append(btnTxt);
          btnDel.addEventListener("click", () => {
            myLi.remove();
          });
          myLi.append("삭제하기: ", btnDel);
          myUl.appendChild(myLi);
        }
    });





