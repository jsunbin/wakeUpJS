<함수>
1. object처럼 사용되는 함수의 특성

function 함수2(a,b,c) {
    const z = a + b + c
    return z
}

function 함수3(a,b,c,d,e,f) {
    return a
}

console.dir(함수2) length : 3
console.dir(함수3) length : 6
// length가 파라미터의 수인 것을 확인함

함수['location'] ='jeju'
console.dir(함수)   // location : jeju 추가됨 
// array, object, function가 모두 같은 방식으로 접근하거나 값을 변경 가능

함수['name'] = 'jejufunction'
console.dir(함수)
// console.dir(jejufunction) 이렇게는 호출 불가

함수['length'] = 5
console.dir(함수) // 변경 불가

2. 아규먼트가 순서대로 들어가는특성

function 함수(a=10, b=20, c=30) {
    return a + b + c
}

함수() // 10 + 20 + 30 = 60
함수(100) // a에 100이 들어가고 100 + 20 + 30 = 150
함수(100, 200)  // a에 100이 들어가고 b에 200이 들어가고 100 + 200 + 30 = 330
함수(100, 200, 300) // 100 + 200 + 300 = 600
함수(c = 300) // a에 300이 들어가고 20 + 30 = 350 
함수(a = 100, c = 300) // a에 100, b에 300, + 30 = 430
함수(a = 100, b = 300, c = 200) // 600
함수(a = 100, c = 200, b = 300) // 100+200+300  = 600

---------------------------------------

<roro 기법> : 객체를 받아서 객체로 반환(Receive an Object, Return an Object)
입력되는 아규먼트가 매우 많은 함수의 경우 호출 하는 쪽에서 어떤 값이 들어가는지 명확히 알기 어렵고 읽기도 어렵다. 그러므로 roro 기법을 사용한다.

장점 : 
- Named parameters: 명명된 인수
- Cleaner default parameters: 더 명료한 인수 기본값
- Richer return values: 더 많은 정보 반환
- Easy function composition: 함수 합성의 용이함

function 함수4(회원등급, 글쓰기, 글읽기, 채널관리, 백업, 소셜로그인여부){
    console.log('함수기능')
    return
}

함수4('Gold', true, true, true, '대화방 전체 백업 가능', true) // 가독성이 떨어진다.

(roro 기법 변환) 

function 함수4({
        회원등급, 
        글쓰기, 
        글읽기, 
        채널관리, 
        백업, 
        소셜로그인여부
    }){
    console.log('함수기능')
    console.log(회원등급, 글쓰기, 글읽기, 채널관리, 백업, 소셜로그인여부)
    return
}

함수4({    // 추가
    회원등급: "Gold", 
    채널관리: false, 
    백업: "부분가능", 
    소셜로그인여부: true
})

function 함수4({
    회원등급 = 'Gold', 
    글쓰기 = true, 
    글읽기 = true, 
    채널관리 = true, 
    백업 = '부분가능', 
    소셜로그인여부 = true
    }){
    console.log('함수기능')
    console.log(회원등급, 글쓰기, 글읽기, 채널관리, 백업, 소셜로그인여부)
    return
}

---------------------------------------

<재귀 함수> : 함수가 자신을 다시 호출하는 구조로 만들어진 함수이다. 재귀함수는 종료조건이 있어야 하며, 종료조건을 설정해주지 않으면 무한 반복을 하게된다. 재귀함수로 작성이 되는 코드는 반복문으로도 작성할 수 있다.

<5!(팩토리얼)>

1. 반복문

result = 1
for (let i = 2; i < 6; i++) {
    result *= i
}

2. 재귀함수

function factorial(n) {
    if (n <= 1) {      // 종료조건 없으면 무한반복
        return n
    }
    return n * factorial(n - 1)
}

<문자열 뒤집기>

1. 반복문

result = ''
for (const i of 'hello world') {
    result = i + result
}

2. 재귀함수

function reverse(txt) {
    if (txt.length <= 1) {
        return txt
    }
    return reverse(txt.slice(1)) + txt[0]
}

----------------------------------------

<스코프> : 변수에 접근할 수 있는 유효범위 (전역 스코프, 함수 스코프, 블록레벨 스코프)
let과 const는 블록레벨 스코프를 가지고있다.

1. 전역 스코프(Global Scope): 전역에 선언되어있어 어느 곳에서든지 해당 변수에 접근할 수 있다는 의미

2. 지역 스코프(Local Scope): 해당 지역에서만 접근할 수 있어 지역을 벗어난 곳에선 접근할 수 없다는 의미

3. 함수 스코프(function-scoped): 자바스크립트에서 함수를 선언하면 함수를 선언할 때마다 새로운 스코프를 생성하게 된다. 그러므로 함수 몸체에 선언한 변수는 해당 함수 몸체 안에서만 접근할 수 있다. 함수 스코프가 바로 지역 스코프의 예라고 할 수 있다.

var a = 1; // 전역 스코프
function number() { // 지역(함수) 스코프
 var a = 111;
 console.log(a);
}
number();  // 111 
console.log(a);  // 1

# number 함수에서 console.log(a);는 a를 출력하기 위해 자신의 함수 스코프 안에 변수 a가 있는지 찾아볼 것이다. 그러면 const a = 111; 을 찾아내면 111을 console에 출력하고 함수는 자신의 사명을 다하게 된다.

var a = 1; // 전역 스코프
function number() { // 지역(함수) 스코프
 console.log(a);
}
number();  // 1

# number 함수 안에 변수 a의 선언을 지운 후 실행 하면 에러가 아닌 전역 스코프에 선언되어 있는 1을 출력하게 된다. 이는 스코프 체인에 의해 일어나는 현상으로 현재 자신의 스코프에서 찾는 변수가 없다면 스코프 체인을 통해 해당 변수를 찾게 된다.

(블록 레벨) 
블록은 0개 이상의 구문을 묶기 위해 사용하고, 중괄호{}로 경계를 구분한다. 블록 스코프 변수는 함수 밖에서 선언하면 함수 스코프 변수처럼 전역 접근할 수 있다. 블록 안에서 선언하면 자신을 정의한 블록과 하위 블록에서만 접근이 가능하다.

let foo = "I'm foo"; // 전역 변수
if(true) {
    let bar = "I'm bar"; // 지역 변수
    console.log(foo);   //I'm foo
    console.log(bar);   //I'm bar
}

console.log(foo);   //I'm foo
console.log(bar);   //Uncaught ReferenceError: bar is not defined.  // 블록 밖에서 호출이 불가하다.

---------------------------------------

<함수의 호이스팅(Hoisting)> : 함수 안에 있는 선언들을 모두 끌어올려서 해당 함수 유효 범위의 최상단에 선언하는 것을 말한다.

# 자바스크립트 Parser가 함수 실행 전 해당 함수를 한 번 훑는다. 
=> 함수 안에 존재하는 변수/함수선언에 대한 정보를 기억하고 있다가 실행시킨다.
즉, 함수 내에서 아래쪽에 존재하는 내용 중 필요한 값들을 끌어올리는 것이다. 실제로 코드가 끌어올려지는 건 아니며, 자바스크립트 Parser 내부적으로 끌어올려서 처리하는 것이다. 실제 메모리에서는 변화가 없다.

  foo();  // hello 출력
  foo2(); // 출력 x

  function foo() { // 함수선언문
          console.log("hello");
  }
  var foo2 = function() { // 함수표현식
          console.log("hello2");
  }


<변수의 호이스팅> (var, let, const)
let, const, class를 이용한 선언문을 호이스팅이 발생하지 않는 것처럼 동작한다.
let 키워드로 선언된 변수를 선언문 이전에 참조하면 참조 에러(ReferenceError)가 발생한다.
이는 let 키워드로 선언된 변수는 스코프의 시작에서 변수의 선언까지 *일시적 사각지대(Temporal Dead Zone; TDZ)에 빠지기 때문이다.

let foo = 1;
{
  console.log(foo);
  let foo = 2;
} // ReferenceError

# 오류가 나는 이유는 ? 
var 키워드는 선언과 함께 undefined로 초기화되어 메모리에 저장되는데 let과 const는 초기화되지 않은 상태로 선언만 메모리에 저장되기 때문이다. 초기화 되지 않으면 변수를 참조할 수 없다. 그래서 참조 에러를 일으키는 것이다.
let과 const에도 호이스팅이 일어나기 때문에 에러를 일으키는 것이다.
선언이 호이스팅되었기 대문에 블록 스코프에서 foo를 찾을 수 없는 것이다.

# 변수는 어떻게 생성되며, 호이스팅은 어떻게 이뤄질까?

1단계: 선언 단계(Declaration phase)
변수를 실행 컨텍스트의 변수 객체에 등록한다.
이 변수 객체는 스코프가 참조하는 대상이 된다.

2단계: 초기화 단계(Initialization phase)
변수 객체에 등록된 변수를 위한 공간을 메모리에 확보한다.
이 단계에서 변수는 undefined로 초기화 된다.

3단계: 할당 단계(Assignment phase)
undefined로 초기화된 변수에 실제 값을 할당한다.

let 키워드로 선언된 변수는 선언 단계와 초기화 단계가 분리되어 진행된다. 즉, 스코프에 변수를 등록(선언 단계)하지만 초기화 단계는 변수 선언문에 도달했을 때(코드 실행 후) 이뤄진다. 초기화 이전에 변수에 접근하려고 하면 참조 에러가 발생한다. 이는 아직 변수가 초기화되지 않았기 때문이다. 즉, 변수를 위한 메모리 공간이 아직 확보되지 않았기 때문이다. 따라서 스코프의 시작 지점부터 초기화 시작 지점까지는 변수를 참조할 수 없다. 스코프의 시작 지점부터 초기화 시작 지점까지의 구간을 ‘일시적 사각지대(Temporal Dead Zone; TDZ)’라고 부른다.

-----------------------------------------

<즉시 실행 함수> : 즉시 실행하고 외부에서 컨트롤 할 필요가 없으며, function scope를 이용하기 때문에  메모리 효율적

주의 ! 
- 즉시 실행함수로 실행시켰을 경우 밖에서 호출할 수 없다.
- 모든 요소들이 로드된 이후에 실행, 함수는 1개만 실행 가능

1. 익명 즉시 실행함수

(function () {
  let a = 1;
  let b = 2;
  return a + b;
}());

2. 기명 즉시 실행함수

(function foo() {
  let a = 3;
  let b = 5;
  return a * b;
}())

(위와 같은 기능을 하는 jquery 문법)

function $(s) {
  return document.querySelector(s)
}

$('.test')

--------------------------------------

<call-by-value> : 값에 의한 호출, 값의 복사 
JavaScript는 call by value만 존재한다. 객체자료형의 경우가 call by reference인 것 처럼 보이지만, 사실 주소가 넘어가는 것이 아니라 주소가 복사가 되어 넘어가기 때문이다.

(해당되는 자료형 : Object, Array, function)
let array = [100, 200, 300];

function test(a) {
    a[0] = 1000;
}

test(array)
array  // [1000, 200, 300]

(해당되는 자료형 : Number, String, boolean, null, undefined)
let v = 100;

function test(a) {
    a = 1000;
}

test(v)
v

---------------------------------

<클로저> : 폐쇄된 공간 안에 데이터에 접근하기 위한 테크닉
클로저는 외부함수(포함하고 있는)의 변수에 접근할 수 있는 내부 함수를 일컫는다.

 function makeAdder(x) {
      var y = 1;
      return function(z) {
        y = 100;
        return x + y + z;
      };
    }

    var add5 = makeAdder(5);
    var add10 = makeAdder(10);
    //클로저에 x와 y의 환경이 저장됨

    console.log(add5(2));  // 107 (x:5 + y:100 + z:2)
    console.log(add10(2)); // 112 (x:10 + y:100 + z:2)
    //함수 실행 시 클로저에 저장된 x, y값에 접근하여 값을 계산

-------------------------------------

<생성자 함수> : 사용자 정의 객체를 생성할 때 사용되는 함수

특징
- 일반 함수와 구분하기 위해 생성자 함수 이름 첫 글자는 대문자로 시작해야함
- 반드시 new 연산자를 붙여 실행해야한다. new 연산자는 생성자 함수의 this가 인스턴스를 바라보도록 만들어주는 역할을 한다.

let book = {
    책이름: '알잘딱깔센 JavaScript 비동기 프로그래밍 - 비동기 너 내 동기가 돼라',
    책가격: 0,
    저자: ['구나영', '김경림'],
    출판일: '2022.08.12'
}

// 책이 100권이라면?

function Book(책이름, 책가격, 저자, 출판일){
    this.책이름 = 책이름
    this.책가격 = 책가격
    this.저자 = 저자
    this.출판일 = 출판일
}

let book1 = new Book('JS', 0, ['이호준'], '2099.10.30')
let book2 = new Book('Python', 100000, ['이호준'], '2099.11.30')
let book3 = new Book('React', 1000000, ['이호준'], '2099.12.30')

console.log(book1, book2, book3)

(동작방식)

function Book(책이름, 책가격, 저자, 출판일){
    // this = {}
    this.책이름 = 책이름
    this.책가격 = 책가격
    this.저자 = 저자
    this.출판일 = 출판일
    // return this
}

(new키워드를 사용하지 않았을 경우)

function Book(책이름, 책가격, 저자, 출판일){
    this.책이름 = 책이름
    this.책가격 = 책가격
    this.저자 = 저자
    this.출판일 = 출판일
}

let book1 = Book('JS', 0, ['이호준'], '2099.10.30')
let book2 = Book('Python', 100000, ['이호준'], '2099.11.30')
let book3 = new Book('React', 1000000, ['이호준'], '2099.12.30')

console.log(book1, book2, book3) // book1과 book2는 반환값이 나와버린다.

--------------------------------

<콜백 함수> : 함수를 아규먼트로 전달하여 함수의 내부에서 실행하는 함수

function 가장작은값에두배(a, b) {
    let result = b(...a) * 2
    return result
}

가장작은값에두배([10, 20, 11, 21, 19, 17], Math.min) // 20 출력

let arr = [10, 20, 11, 21, 19, 17]
arr.map((v, i) => v * 2)


let arr = [10, 20, 11, 21, 19, 17]
function 두배(v, i) {
    return v * 2
}
arr.map(두배)

-----------------------------

<Map> : Map 객체는 키-값 쌍을 가지는 객체 자료형의 한 종류

let m = new Map();

(.set) Map에 값을 넣기 
m.set('하나', '1');
m.set(1, '하나');
m.set(true, 1);
m.set(false, 0);

(.get) Map의 값에 접근하기
console.log(m.get('하나'));
console.log(m.get(true));

(.has) Map의 값이 있는지 확인하기
console.log(m.has('하나'));

(.delete) Map의 값을 제거하기
console.log(m.delete('하나'));
console.log(m.has('하나'));
console.log(m);

(.size) Map의 크기를 확인하기
console.log(m.size);

(Map의 여러가지 활용법)

// Map의 순환
for (var variable of m) {
  console.log(`m을 순회하고 있습니다. ${variable[0]}`)
  console.log(`m을 순회하고 있습니다. ${variable[1]}`)
}

// Map의 값에 접근
console.log(m.keys());
console.log(m.values());
console.log(m.entries());

// 인덱스를 가지는 자료형을 맵핑하기
let temp = new Map([[1, 10],
[2, 20],
[3, 30],
[4, 40]]);

console.log(temp);

!! Map과 Object의 차이 !!
- Object의 키는 문자열 타입으로만 지정해야하지만, Map의 키는 모든 값을 가질 수 있다.
- Object는 크기를 사용자가 직접 수동으로 알아내야 하지만, Map은 size를 통해 크기를 쉽게 얻을 수 있습니다.

objMap = new Map();
objMap.set('one', 1);
objMap.set('two', 2);
objMap.set('three', 3);

console.log(objMap.size); // 3

obj = {hi : 1, hi2 : 2, hi3 :3, hi4: 4};
console.log(obj.length); // undefined
console.log(obj.size); // undefined

Map은 데이터를 추가하거나 제거하는 작업에서 Object 보다 더 나은 성능을 보인다.

m.set('하나', 1) // 메서드 체이닝
    .set('둘', 2)
    .set('셋', 3)
    .set('넷', 4)
    .set(true, '트루')
    .set([1, 2], '리얼리?') //이렇게는 호출 x

console.log(m.get([1, 2])) // 이렇게는 호출 x

let m = new Map();
let test = [1, 2];

m.set('하나', 1) // 메서드 체이닝
    .set(true, '트루')
    .set(test, '리얼리?') // 호출 가능

console.log(m.get(test))

