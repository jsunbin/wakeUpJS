<date>
UTC와 today의 지정 로캘(locale) KST와의 차이는 -9시간이다.
쉬운 말로 협정 세계시(Universal Time Coordinated)와 내 컴퓨터 시간 차가 -9시간

1. Date.prototype.getTimezoneOffset : UTC와 지정 로케일(Locale) 시간과의 차이를 분단위로 반환한다.KST(Korea Standard Time)는 UTC에 9시간을 더한 시간이다. 즉, UTC = KST - 9h이다.

const today = new Date();
const x = today.getTimezoneOffset() / 60; // 분단위값을 60으로 나눈다

console.log(today); // Thu May 16 2019 17:58:13 GMT+0900 (한국 표준시)
console.log(x);     // -9


2. Date.prototype.toDateString : 사람이 읽을 수 있는 형식의 문자열로 날짜를 반환한다.

const d = new Date('2019/5/16/18:30');

console.log(d.toString());     // Thu May 16 2019 18:30:00 GMT+0900 (한국 표준시)
console.log(d.toDateString()); // Thu May 16 2019

3. Date.prototype.toTimeString : 사람이 읽을 수 있는 형식의 문자열로 시간을 반환한다.

const d = new Date('2019/5/16/18:30');

console.log(d.toString());     // Thu May 16 2019 18:30:00 GMT+0900 (한국 표준시)
console.log(d.toTimeString()); // 18:30:00 GMT+0900 (한국 표준시)

------------------------------------

today.toISOString : 국제표준시 기준 형식으로 표현

today.toLocaleString : 날짜를 언어별로 구분하여 나타내는 문자열을 반환

today.toLocaleString("ko-KR"); // -> 2020. 7. 24. 오후 12:30:00
today.toLocaleString("en-US"); // -> 7/24/2020, 12:30:00 PM
today.toLocaleString("ja-JP"); // -> 2020/7/24 12:30:00

--------------------------------------

1. Date.prototype.getDay : 요일(0 ~ 6)를 나타내는 정수를 반환한다. 반환값은 아래와 같다.
일요일	0
월요일	1
화요일	2
수요일	3
목요일	4
금요일	5
토요일	6
setDay는 없다. 요일을 지정하는건 의미없다. date를 지정하면 자동으로 요일이 결정되기 때문이다.

2. Date.prototype.getFullYear : 년도를 나타내는 4자리 숫자를 반환/설정한다

3. Date.prototype.getMonth  : 월을 나타내는 0 ~ 11의 정수를 반환/설정한다. 1월은 0, 12월은 11이다. 

4. Date.prototype.getDate : 날짜(1 ~ 31)를 나타내는 정수를 반환/설정한다.

5. Date.prototype.getHours : 시간(0 ~ 23)를 나타내는 정수를 반환/설정한다.

6. Date.prototype.getMinutes : 분(0 ~ 59)를 나타내는 정수를 반환/설정한다.

7. Date.prototype.getSeconds : 초(0 ~ 59)를 나타내는 정수를 반환/설정한다.

8. Date.prototype.getMilliseconds : 밀리초(0 ~ 999)를 나타내는 정수를 반환/설정한다.

9. Date.prototype.getTime : 1970년 1월 1일 00:00:00(UTC)를 기점으로 현재 시간까지 경과된 밀리초를 반환/설정한다.

------------------------------------------------

정규 표현식(Regular Expression) : 정규식(Regular Expression)은 문자열에서 특정 내용을 찾거나 대체 또는 발췌하는데 사용된다.

1. 리터럴 방식
const regex = /abc/;

2. 생성자 방식
const regex = new RegExp("abc");
const regex = new RegExp(/abc/); 

슬래쉬 문자 두개 사이로 정규식 기호가 들어가는 형태이다. 뒤의 i 는 정규식 플래그이다.

/regexr/i  / 시작기호 regexr은 패턴 / 종료기호 i는 플래그이다

----------------------------------------------------

(정규식 플래그) : 정규식을 생성할 때 고급 검색을 위한 전역 옵션을 설정할 수 있도록 지원하는 기능이다.

const regex1 = /apple/i;
const regex2 = /apple/gm;

i	: Ignore Case	대소문자를 구별하지 않고 검색한다.
g	: Global 문자열 내의 모든 패턴을 검색한다.
m	: Multi Line	문자열의 행이 바뀌더라도 검색을 계속한다.
s	​: .​(모든 문자 정규식)이 개행 문자 \n도 포함하도록
u	: unicode	유니코드 전체를 지원
y	: sticky	문자 내 특정 위치에서 검색을 진행하는 ‘sticky’ 모드를 활성화

(정규식 메서드)

- ("문자열").match(/정규표현식/플래그) 
"문자열"에서 "정규표현식"에 매칭되는 항목들을 배열로 반환

- ("문자열").replace(/정규표현식/, "대체문자열")
"정규표현식"에 매칭되는 항목을 "대체문자열"로 변환

- ("문자열").split(정규표현식)
"문자열"을 "정규표현식"에 매칭되는 항목으로 쪼개어 배열로 반환

- (정규표현식).test("문자열")
"문자열"이 "정규표현식"과 매칭되면 true, 아니면 false반환

- (정규표현식).exec("문자열")
match메서드와 유사(단, 무조건 첫번째 매칭 결과만 반환)

----------------------------------------------

(정규식 기호 모음) 

a-zA-Z : 영어알파벳(-으로 범위 지정)
ㄱ-ㅎ가-힣 : 한글 문자(-으로 범위 지정)
0-9 : 숫자(-으로 범위 지정)
.	: 모든 문자열(숫자, 한글, 영어, 특수기호, 공백 모두) 단, 줄바꿈 X
\d : 숫자
\D : 숫자가 아닌 것
\w : 밑줄 문자를 포함한 영숫자 문자에 대응, [A-Za-z0-9_] 와 동일
\W : \w 가 아닌 것
\s : space 공백
\S : space 공백이 아닌 것
\특수기호	: 특수기호 \* \^ \& \! \? ...등
\b : 63개 문자(영문 대소문자 52개 + 숫자 10개 + (underscore))가 아닌 나머지 문자에 일치하는 경계(boundary)
\B : 63개 문자에 일치하는 경계
\x : 16진수 문자에 일치, /\x61/는 a에 일치
\0 : 8진수 문자에 일치, /\141/은 a에 일치
\u : 유니코드(Unicode) 문자에 일치, /\u0061/는 a에 일치
\c : 제어(Control) 문자에 일치
\f : 폼 피드(FF, U+000C) 문자에 일치
\n : 줄 바꿈(LF, U+000A) 문자에 일치
\r : 캐리지 리턴(CR, U+000D) 문자에 일치
\t : 탭 (U+0009) 문자에 일치


(정규식 검색 기준 패턴)

|	: OR a|b

[] : 괄호안의 문자들 중 하나. or 처리 묶음 보면 된다.
- /abc/ : "abc"를 포함하는
- /[abc]/ : "a" 또는 "b" 또는 "c" 를 포함하는
- [다-바] : 다 or 라 or 마 or 바

[^문자] : 괄호안의 문자를 제외한 것

[^lgEn] : "l" "g" "E" "N" 4개 문자를 제외
※ 대괄호 안에서 쓰면 제외의 뜻, 대괄호 밖에서 쓰면 시작점 뜻

^문자열 : 특정 문자열로 시작 (시작점) /^www/

문자열$ : 특정 문자열로 끝남 (종착점) /com$/


(정규식 갯수 반복 패턴)

? : 없거나 or 최대 한개만 /apple?/
* :	없거나 or 있거나 (여러개) /apple*/
+	: 최소 한개 or 여러개 /apple+/
*? : 없거나, 있거나 and 없거나, 최대한개 : 없음, {0}와 동일
+? : 최소한개, 있거나 and 없거나, 최대한개 : 한개, {1}와 동일
{n} :	n개
{Min,} : 최소 Min개 이상
{Min, Max} : 최소 Min개 이상, 최대 Max개 이하, {3,5}? == {3}와 동일


(정규식 그룹 패턴) 

() :  그룹화 및 캡쳐
(?:패턴) : 그룹화 (캡쳐 X)
(?=) : 앞쪽 일치(Lookahead), /ab(?=c)/
(?!) : 부정 앞쪽 일치(Negative Lookahead), /ab(?!c)/
(?<=) : 뒤쪽 일치(Lookbehind), /(?<=ab)c/ 
(?<!) : 부정 뒤쪽 일치(Negative Lookbehind),/(?<!ab)c/

----------------------------------------------
<canvas> : canvas 요소는 웹 페이지에 그래픽을 그려주는 방법이며 이 요소는 그래픽을 위한 컨테이너 역할만 한다. 따라서 실제로 그래픽을 그리기 위해서는 자바스크립트를 이용해야 한다.

canvas 요소는 테두리(border)도 콘텐츠(content)도 없는 웹 페이지 내의 단순한 사각형의 공간이다. 그러므로 반드시 style 속성을 이용하여 캔버스의 크기를 설정해 주어야 한다.

(사각형 그리기) 

context.strokeRect(10, 10, 250, 130); // strokeRect()	사각형 영역에 테두리를 그릴 때 사용함.

context.fillStyle = "rgba(255,0,0,1)"; // fillStyle()	사각형 영역을 채울 색상을 설정함. 색상값만을 사용할 수도 있고, 투명도까지 명시할 수 있음.

context.fillRect(20, 20, 200, 100); // fillRect()	사각형을 그리기 시작할 시작점의 x, y좌표와 사각형의 너비, 높이 등을 설정함.

context.clearRect(30, 30, 150, 50); // clearRect()	지정된 사각형 영역을 투명하게 만듦.

(선 그리기)

context.moveTo(0, 0); // moveTo()	선이 시작될 좌표를 설정함.

context.lineTo(300, 100); // 선이 끝나는 좌표를 설정함, lineTo() 함수를 연속적으로 사용할 때의 시작 위치는 이전 선 그리기가 끝난 위치로 자동 설정됨.

context.lineTo(150, 150);

context.stroke(); // stroke()	선 그리기 시작함.

(선 그리기로 도형 만들기) : moveTo() 함수와 lineTo() 함수를 이용하여 선 그리기로 도형을 만들고 fillStyle() 함수로 원하는 색상을 지정하고나서, fill() 함수를 사용하여 만든 도형에 색상을 칠하는 방법

context.moveTo(0, 0);

context.lineTo(300, 200);

context.lineTo(150, 0);

context.lineTo(0, 0);

context.fillStyle = "#0099FF";

context.fill();

context.stroke();

(원 그리기)

context.beginPath();  // beginPath()	도형 그리기를 시작함.

context.arc(150, 100, 50, 0, 2 * Math.PI);  // arc() 원의 중심 좌표와 반지름, 원을 그리기 시작할 시작 위치와 종료 위치의 좌표, 그리는 방향 등을 설정함.

context.closePath(); // closePath()	도형 그리기를 마침.


--------------------------------------------

<D3> : Data - Driven Documents. JavaScript
데이터 중심의 문서 (Data - Driven Documents)의 약자로 자바스크립트 기반의 라이브러리 언어이다.
사용자가 입력한 시각화 규칙을 바탕으로 데이터를 반영해 시각화 결과물을 생성한다. 데이터 시각화 프레임워크로 잘 알려져 있고 HTML5의 SVG(Scalable Vector Graphic) 을 통하여 다양한 화면 해상도에서도 깨짐없는 Visualizing이 가능하다.

D3 동작과정

Loading - 시각적 요소를 그리기 전 보여주고자 하는 데이터를 불러온다.
Selecting-Binding - 시각적 요소 안에 데이터 수치를 입력한 코드에 맞춰 연동시킨다.
Transform - 그래프의 유형, 색상, 축 등 다양한 요소 지정
Transition - 클릭, 드래그 등 인터렉션 효과 지정

D3 메서드

대부분의 D3메서드는 결과 값으로 선택물의 참조를 반환하므로, 메서드를 체인으로 연결할 때는 순서가 중요하다. 어떤 메서드의 반환 값 타입은 체인으로 연결된 다음 메서드가 기대하는 입력 값과 맞아야 한다.

d3.select() : 현재 문서에서 특정 태그 하나를 선택하는 메서드
d3.selectAll() : 특정 태그 전체를 선택
.attr() : 속성값을 지정하거나 가져온다.
.style() : css 스타일 프로퍼티를 지정하거나 가져온다.
.data() : 데이터를 문서요소에 가져온다.
.enter() : 부족한 문서요소를 데이터 개수 만큼 추가한다. 데이터 개수에 맞게 태그를 추가함
.append() - 새로운 태그 추가
.exit() : 종료 (더이상 필요없는 태그 반환)
.remove : 현재 문서에서 선택된 태그를 제거

------------------------------------------------
(아래와 같은 자바스크립트는 d3.js를 사용하면 간단하게 표현할 수 있다.)

var paragraphs = document.getElementsByTagName("p");
for (var i = 0; i < paragraphs.length; i++) {
  var paragraph = paragraphs.item(i);
  paragraph.style.setProperty("color", "blue", null);
}

=> d3.selectAll("p").style("color", "blue");


<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D3로 차트 만들기</title>
    <script src="js/d3.min.js"></script>
</head>
<body>
    <svg width="500" height="500"></svg>  // svg 태그 생성성
    <script src="http://d3js.org/d3.v3.js"></script>  // D3를 사용하기 위한 CDN 방식 사용
      <script>
      const dataFile = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50];  // 차트에 사용할 데이터 배열 형태 생성

      const svg = d3.select('svg');  // D3 문법, svg라는 태그를 선택하라는 의미

      svg.selectAll('bar')
        .data(dataFile)
        .enter().append('rect')
        .attr('height', (d, i) => {return d})
        .attr('width', 40)
        .attr('x', (d, i) => {return 50 * i})
        .attr('y', (d, i) => {return 100 - dataFile[i]})
      </script>
</body>
</html>

---------------------------------------------

<로컬 스토리지> : localStorage를 사용하면, 브라우저에 key-value 값을 Storage에 저장할 수 있다. 저장한 데이터는 세션간에 공유된다. 즉, 세션이 바뀌어도 저장한 데이터가 유지됨

setItem() : localStorage에 아이템을 추가하기 위해서는 setItem() 함수를 사용한다.
getItem() : localStorage의 아이템을 읽기 위해서는 getItem() 함수를 사용한다.
removeItem() : 해당 값 삭제
clear() – 모든 값 삭제
key(index) – 인덱스(index)에 해당하는 키 조회
length – 저장된 값의 개수