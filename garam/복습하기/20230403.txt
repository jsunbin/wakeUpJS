숫자형(Number) : 숫자를 처리하기 위한 자료형

let n1 = 10.6535626;
console.log(~~n1); // 10 출력
console.log(parseInt(n1)); // 10 출력
console.log(n1.toFixed(3)); // 소수점 세자리까지 출력

let n2 = 1001;
console.log(parseInt(n2,2)); // 9 출력,2진법으로 된 숫자를 10진법으로 바꾸기

parseInt(n2, 8)
parseInt(n2, 16) 등으로 8진법, 16진법의 숫자를 10진법으롤 바꾸기

console.log(Number(true)); // true = 1 출력
console.log(Number(false)); // false = 0 출력

<숫자가 아니므로 parseInt를 사용하면 NaN 출력>
console.log(parseInt(true)); 
console.log(parseInst(false)); 

<Number로 형변환>
console.log(Number(" ")); // 0
console.log(Number("")); // 0
console.log(Number("hello")); // NaN
console.log(Number("10 20")); // NaN
console.log(Number("10abc")); // NaN
console.log(Number(10 20)); error

<공백도 변환가능!> (parseInt도 마찬가지)
console.log(Number("   10")); // 10
console.log(Number("10    ")); // 10
console.log(Number("   10    ")); // 10

<parseInt 권장!>
텍스트가 숫자로 시작하지 않을 때 NaN,텍스트가 숫자로 시작했을 경우 숫자까지만 변환 가능
console.log(parseInt(" ")); // NaN 
console.log(parseInt("")); // NaN 
console.log(parseInt("hello")); // NaN
console.log(parseInt("10 20")); // 10
console.log(parseInt("10abc")); // 10 뒤 문자는 변환 x

Math(중요!!)
Math.abs(-10); // 절댓값 출력 (10)
Math.ceil(10.3); // 올림 (11)
Math.floor(10.3); // 내림 (10)
Math.sqrt(100); // 루트 (10)
Math.round(10.5); // 반올림 (11)
Math.round(10.4); // 반올림 (10)

Math.min(1, 3, 5, 6, 7, 23, 9); // 1
Math.max(1, 3, 5, 6, 7, 23, 9); // 23

<배열의 값을 min,max 하려면 '...' 사용!>
Math.min([1, 2, 3, 4, 5]); // 작동 x
Maht.min(...[1, 2, 3, 4, 5]); // 1

let values = [1, 2, 3, 4, 5];
let values2 = [6, 7, 8, 11, 10];
Math.max(...values); // 1
Math.max(...values, ...values2); // 두 변수 중 젤 큰 값 11

<0이상~ 1미만의 부동소수점의 난수 생성>
Math.random() 

<1~10까지 난수 생성>
parseInt(Math.random() * 10 + 1); +1을 해주는 이유는 10을 포함하지 않기 때문에

<Math.random 최솟값, 최댓값 지정>
(Math.random() * (최댓값 - 최솟값)) + 최솟값

부동소수점 
0.1 + 0.2 = 0.3이 안나오는 이유
JS는 기본적으로 사람이 사용하기 편리하도록 10진수를 기반으로 수를 표현하지만 컴파일 과정에서 2진수로 전환된다.

.1 * 2 === 0.2,
.2 * 2 === 0.4,
.4 * 2 === 0.8,
.8 * 2 === 1.6,
.6 * 2 === 1.2,
.2 * 2 === 0.4 // 여기서부터 같은 결과 반복
.4 * 2 === 0.8,
.8 * 2 === 1.6,
.6 * 2 === 1.2,
.2 * 2 === 0.4,
.4 * 2 === 0.8,
.8 * 2 === 1.6,
.6 * 2 === 1.2
...

0.1은 무한소수화가 된다. 컴퓨터 메모리의 한계로 무한한 값을 저장 할 수 없으므로 적당한 소수점 위치에서 반올림 후 계산 종료

때문에 js는 값을 확실히 계산할 수 없는 두 수의 합을 10진수로 계산해야하기 때문에 오차가 발생함

결론은 0.1이 컴퓨터 입장에서 무한수, 반복문 안에서 0.1씩 증가하는 코드를 혹시 작성하게 된다면, 예측 불가한 값이 생성된다는 것을 인지할 것.

* 문제가 되는 경우 *

let width = 0.3;
let height = 0.6;
if (width + height >= 0.9) {
      console.log("실행해!");
} 
실행 하지 않는다.

<BigInt : js에서 큰 숫자를 사용할 때>

제대로 나오게 하려면 n을 붙이기
9007199254740991n + 1n; // 9007199254740992n
또는 BigInt 사용
BigInt(9007199254740991) + BigInt(1); // 9007199254740992n

BigInt(5) + 5n
BigInt(5) + 5 // error
BigInt(5) / 2n // 2n (소수 표현 안됨)
BigInt("10") + BigInt("10") // 큰 값을 정수로 입력받을 때에는 string으로 처리해서 받아야 함

<할당연산>
let x = 10;
x = x + 10; 를 x += 10;로 

<단항연산>
console.log(-2);
console.log(-(-2));
console.log(+-2);
console.log(+(+2));
console.log(+(+"2"));

<증감연산>
let num = 3;
++num; // 선증가 후할당
--num;
num++; // 선할당 후증가
num--;

<단락회로평가=단축평가>
표현식을 평가하는 도중에 평가 결과가 확정된 경우 나머지 평가 과정을 생략하는 것을 말한다.

&&연산자의 경우 둘 다 true일 경우 true를 반환하기 때문에 첫 번째 피연산자가 false일 경우 뒤의 피연산자는 굳이 볼 필요가 없어 연산을 끝내버리게 된다.

||연산자도 마찬가지로 두 피연산자 중 하나만 true일 경우 true를 반환하기 때문에 뒤의 연산자는 볼 필요 없이 연산이 끝나버린다.

true : 1 , false : 0 and(&&) : 곱, or(||) : 합, not(!) : 부정

console.log(!"false"); // 문자열 값이라 false 출력
console.log(!"0"); // 문자열 false
console.log(!false); // true
console.log(!0); // true

console.log("abc" / 2); // NaN

console.log(!!NaN); // false
console.log(!!undefined); // false
console.log(!!null); // false

<삼항 연산자>
JavaScript에서 세 개의 피연산자를 받는 유일한 연산자로 앞에서부터 조건문, 물음표(?), 조건문이 참(truthy)일 경우 실행할 표현식, 콜론(:), 조건문이 거짓(falsy)일 경우 실행할 표현식이 배치됩니다. 해당 연산자는 if...else문의 대체재로 빈번히 사용된다.

const sale = true;

const price = sale ? 100 : 200; // sale이 true라면 100,false라면 200이 price로 들어간다.

console.log(price);

(통장에 100000원 초과해서 있으면 '초부자' 10000원 초과해서 있으면 '부자' 10000 이하면 부를 바라는자 출력)

const money = 5000;
const result = (money > 100000) ? '초부자' : (money > 10000) ? '부자' : '부를 바라는자';

<드모르간 법칙>

if (!(isValidToken && isValidUser)) {
  console.log('로그인 실패');
}// 뒤에 추가 연산이 더 붙게 된다면 가독성이 떨어지고 유지보수가 어려울 수 있다.

따라서 소괄호를 한꺼풀 벗기는것이 좋다. 드모르간의 법칙을 이용해서 

if (!isValidToken || !isValidUser) {
  console.log('로그인 실패');
}

로 변환할 수 있다.

<AND 부정>
if (A && B) {
  // 성공
}

위와 같은 코드의 조건을 부정하면 아래처럼 드모르간 법칙을 써서 코드를 작성할 수 있다. 

if (!A || !B) {
  // 실패
}

<OR 부정>

if (A || B) {
  // 성공
}

위와 같은 코드의 조건을 부정하면 아래처럼 드모르간 법칙을 써서 코드를 작성할 수 있다. 

if (!A && !B) {
  // 실패
}

<nullish 연산자>
널 병합 연산자 (??) 는 왼쪽 피연산자가 null 또는 undefined일 때 오른쪽 피연산자를 반환하고, 그렇지 않으면 왼쪽 피연산자를 반환하는 논리 연산자이다.

let a = null;
let b = 10;
let c = null;

console.log(a ?? b ?? c); // 10 반환

(??와 ||의 차이)
|| : 0 ,null, undefined
?? : null, undefined

||는 첫 번째 truthy 값 반환
??는 첫 번째 정의된(defined) 값 반환

let test = 0;

console.log(test || 10000); // 10000
console.log(test ?? 10000); // 0

<NaN>

console.log(NaN == NaN); // false
console.log(NaN === NaN); // false
console.log("---");

console.log(isNaN(undefined)); // true
console.log(isNaN(null)); // false
console.log(isNaN(NaN)); // true
console.log("---");

ES6에서 추가 도입(암기)
console.log(Number.isNaN(undefined)); // false
console.log(Number.isNaN(null)); // false
console.log(Number.isNaN(NaN)); // true

<boolean>

let x = 5;
let y = 10;

console.log(x > y); // false

(true, false 값을 and, or 연산했을 경우 반환값은 true, false)

let a = true;
let b = false;
console.log(a && b); // false

(true, false가 아닌 값을 and, or연산 했을 경우 단락회로평가를 하게 된다.)

let a2 = "hello";
let b2 = "";

console.log(a2 && b2); // and 연산 undefined 출력

***** 중요 ****
console.log(Boolean("hello")); // 문자열이 뭐라도 있으면 t
console.log(Boolean("")); // f
console.log(Boolean([1, 2, 3])); // t
console.log(Boolean([])); // 말도 안되게 t
console.log(Boolean({ one: 10, two: 20 })); // t
console.log(Boolean({})); // 말도 안되게 t
console.log(Boolean(0)); // f
console.log(Boolean(-1)); // 0 이외는 t
console.log(Boolean(undefined)); // f
console.log(Boolean(null)); // f
console.log(Boolean(NaN)); // f

<undefined> 
변수는 존재하나, 어떠한 값으로도 할당되지 않아 자료형이 정해지지 않은 상태

let a;
console.log(a); //undefined 상태

if (typeof y === "undefined") {
    console.log('y에 아무것도 할당되지 않았습니다! ');
}

if(!a) {
    console.log('a에 아무것도 할당되지 않았습니다!')
}

<null> 
변수는 존재하나, null 로 (값이) 할당된 상태. 즉 null은 자료형이 정해진 상태

