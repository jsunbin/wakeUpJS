<Set> : Set 객체는 중복을 제거한 값들의 집합이다.
집합, 합집합, 교집합, 차집합, 여집합을 가능하게 한다.

1. Set 객체 선언
let mySet = new Set();

2. Set 객체 사용

특정 요소 추가 : add
Set 객체에 주어진 값을 갖는 새로운 요소를 추가
mySet.add(1);		// Set { 1 }
mySet.add(5);		// Set { 1, 5 }
mySet.add('hi');	// Set { 1, 5, 'hi' }

특정 요소 확인: has
Set 객체에 주어진 값을 갖는 요소가 있는지 확인 (boolean)
// Set { 1, 5, 'hi' }
mySet.has(1);		// true
mySet.has(3);		// false
mySet.has('hi');	// true

특정 요소 제거: delete
Set 객체에서 주어진 값을 갖는 요소를 제거
// Set { 1, 5, 'hi' }
mySet.delete('hi');	// Set { 1, 5 }
mySet.delete(1);	// Set { 5 }

요소의 개수 반환: size
Set 객체 내에 있는 요소들의 개수를 반환
// Set { 1, 5, 'hi' }
//Set.size
mySet.size	// 3

모든 요소 제거: clear
Set 객체에서 모든 요소를 제거
// Set { 1, 5, 'hi' }
mySet.clear()	// Set { }

//////////////////////////////

회사게시판 = ['이호준','이호준','이호준','이호준','이호준','이호준','이호준','이호준','김연하','최흥석','이나영']

문제 1 : 몇 명이 게시판에 게시물을 썼나요? (각각의 인원이 유일해야 합니다.)

let 게시자 = new Set(회사게시판);
게시자.size;

문제 2 : 각각 몇 개의 게시물을 작성하였나요?

풀이 1.
for (const i of 게시자) {
    console.log(i, 회사게시판.filter(e => e===i).length) 
}

풀이 2.
let map = new Map()
for (const i of 회사게시판) {
    map.set(i, (map.get(i) || 0) + 1);
}

//////////////////////////////

let b = new Set('aabbbccccdd'.split('')) // 배열로 만든다.

// 교집합
let x = new Set('abc')
let y = new Set('cde')
let cro = [...x].filter(e => b.has(e))  // 배열로 전개후 filter(배열은 filter를 쓸수있다.) 

// 합집합
let union = new Set([...x, ...y])

// 차집합
let dif = [...a].filter(e => !b.has(e))

---------------------------------------------

<this> : 해당 함수 호출 방식에 따라 this에 바인딩 되는 객체가 달라짐.

자바스크립트의 함수 호출 방식
1. (일반)함수 호출
const foo = function(){
  console.log(this);
}
foo(); // window (내부함수일 경우 this는 전역객체에 바인딩)


2. 메소드 호출 (메소드: 객체의 값이 함수로 이루어 진 경우)
var person = {
  name: 'Lee',
  printName: function() {
    console.log(this.name);
  }
}    // (this: 해당 메소드를 소유한 객체에 바인딩된다.)

3. 생성자 함수 호출(객체 생성 함수)
var instance = new foo(); // instance
this: 함수의 인자로 전달받은 값을 객체의 속성에 할당하기 위해 this 키워드를 사용

4. apply/call/bind 호출
apply, call, bind 메소드를 통해 this를 특정 객체에 명시적으로 바인딩이 가능하다.

apply,call: 함수를 호출
=> 대표적으로 유사 배열 객체에 배열 메소드를 사용하는 경우에 활용
bind: this로 사용할 객체만 전달
=> 메서드의 this와 메서드 내부의 중첩 함수 또는 콜백 함수의 this가 불일치한는 문제를 해결하기 위해 사용

const Person = function (name) {
  this.name = name;
};
const foo = {};

Person.apply(foo, ['name']);
console.log(foo); // { name: 'name' }
코드에서, apply를 통해 생성자 함수 Person 내부의 this에 객체 foo를 바인딩시켰다.

const person = {
  name: 'Jamong',
  foo(callback){
    setTimeout(callback.bind(this),100);
  }
};
person.foo(function(){
  console.log(`my name is ${this.name}`);
});

여기서 bind를 사용하지 않으면, this는 person의 객체가 아닌, 일반함수에서 호출되어 전역 객체를 가리키게 된다.

**예제**

        <button id="btn1">클릭해봐요!</button>
        <button id="btn2">클릭해봐요!</button>
        <script>
            let myObj = {
                val1: 100,
                func1: function () {
                    console.log(this);
                },
            };

            let test = myObj.func1;

            let button1 = document.getElementById("btn1");
            button1.addEventListener("click", myObj.func1);
            // myObj.func1이 가리키고있는 함수를  button1가 클릭 되었을 때 직접 실행하게 되었다.
            let button2 = document.getElementById("btn2");
            button2.addEventListener("click", test);
            // test가 가리키고있는 함수를  button2가 클릭 되었을 때 직접 실행하게 되었다.
        </script>


이름이 있는 함수 안에서 정의된 함수의 경우 this는 전역을 바라보게 되며 a함수는 object 안에 함수이다.

const person = {
  name: 'hojun',
  age: 25,
  a() {
      console.log(this);
      console.log(this.name);
      function b() {
          console.log(this);
          console.log(this.name);
          function c() {
              console.log(this);
              console.log(this.name);
          }
          c()
      }
      b()
  }
}
person.a()

a에서 this = person
b에서 this = 상위스코프(상위에서 person을 보고있음) 즉 person
c에서 this = 상위스코프(상위에서 person을 보고있음) 즉 person
const person = {
  name: 'hojun',
  age: 25,
  a() {
      console.log(this);
      console.log(this.name);
      let b = () => {
          console.log(this);
          console.log(this.name);
          let c = () => {
              console.log(this);
              console.log(this.name);
          }
          c()
      }
      b()
  }
}
person.a()

메서드 콜백함수에서 this로 사용할 값을 제공할 수도 있다.
[1, 2, 3].forEach(function () { console.log(this) }) // window
[1, 2, 3].forEach(function () { console.log(this) }, [10, 20, 30]) // window

---------------------------------------------

JSON.parse()란?
parse 메소드는 string 객체를 json 객체로 변환시켜준다.

JSON.stringify란?
stringify 메소드는 json 객체를 String 객체로 변환시켜준다.

<Json.parse() 사용해보기>

const str = {
  "name": "홍길동",
  "age": 25,
  "married": false,
  "family": { "father": "홍판서", "mother": "춘섬" },
  "hobbies": ["독서", "도술"],
  "jobs": null
};

const obj = JSON.parse(str);
console.log(obj);

{
    name: "홍길동",
    age: 25,
    married: false,
    family: {
        father: "홍판서",
        mother: "춘섬"
    },
    hobbies: [
        "독서",
        "도술"
    ],
    jobs: null
}

JSON 문자열에서는 키(key)를 나타낼 때 반드시 쌍따옴표로 감싸줘야 하는 반면에, JavaScript 객체에서는 쌍따옴표를 꼭 사용할 필요는 없다. 이렇게 JavaScript 객체로 변환된 데이터는 .나 [] 기호를 사용하여 각 속성에 접근할 수 있다.


///////////////////

<Json.stringify() 사용해보기>
const obj = {
  name: "홍길동",
  age: 25,
  married: false,
  family: {
    father: "홍판서",
    mother: "춘섬",
  },
  hobbies: ["독서", "도술"],
  jobs: null,
};

const str = JSON.stringify(obj);
console.log(str);

'{"name":"홍길동","age":25,"married":false,"family":{"father":"홍판서","mother":"춘섬"},"hobbies":["독서","도술"],"jobs":null}'

const str2 = JSON.stringify(obj, null, 2);

{
  "name": "홍길동",
  "age": 25,
  "married": false,
  "family": {
    "father": "홍판서",
    "mother": "춘섬"
  },
  "hobbies": [
    "독서",
    "도술"
  ],
  "jobs": null
}

------------------------------------

(date) : 자바스크립트에서는 Date 객체를 사용하여 매 순간 변화하는 시간과 날짜에 관한 정보를 손쉽게 얻을 수 있다.
Date 객체는 연월일, 시분초의 정보와 함께 밀리초(millisecond)의 정보도 함께 제공한다.

 

1. 연도(year) : 1900년(00) ~ 1999년(99)

2. 월(month) : 1월(0) ~ 12월(11)  // 자바스크립트에서 월(month)을 나타낼 때는 1월이 0으로 표현되고, 12월이 11로 표현된다는 사실에 유의해야 한다.

3. 일(day) : 1일(1) ~ 31일(31)

4. 시(hours) : 0시(0) ~ 23시(23)

5. 분(minutes) : 0분(0) ~ 59분(59)

6. 초(seconds) : 0초(0) ~ 59초(59)

new Date()
인수를 전달하지 않으면 현재 날짜와 시간을 가지는 인스턴스를 반환한다.

new Date(milliseconds)
인수로 숫자 타입의 밀리초를 전달하면 1970년 1월 1일 00:00(UTC)을 기점으로 인수로 전달된 밀리초만큼 경과한 날짜와 시간을 가지는 인스턴스를 반환한다.

new Date(dateString)
인수로 날짜와 시간을 나타내는 문자열을 전달하면 지정된 날짜와 시간을 가지는 인스턴스를 반환한다.
이때 인수로 전달한 문자열은 Date.parse 메소드에 의해 해석 가능한 형식이어야 한다.

new Date(year, month[, day, hour, minute, second, millisecond])
인수로 년, 월, 일, 시, 분, 초, 밀리초를 의미하는 숫자를 전달하면 지정된 날짜와 시간을 가지는 인스턴스를 반환한다.
이때 년, 월은 반드시 지정하여야 한다. 지정하지 않은 옵션 정보는 0 또는 1으로 초기화된다. 년, 월을 지정하지 않은 경우 1970년 1월 1일 00:00(UTC)을 가지는 인스턴스를 반환한다.

* Date 생성자 함수를 new 연산자없이 호출
Date 생성자 함수를 new 연산자없이 호출하면 인스턴스를 반환하지 않고 결과값을 문자열로 반환한다.
